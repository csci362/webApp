* Install python
0. Special Mac steps
There are a few more steps for OS X - notably a fortran compiler for
scipy, and xcode’s command line tools

1. Check that you have OS X 10.9, or update it.
2. Sign in to your Apple Developer account (or create an account there)
3. Get the Xcode Command Line Tools 
4. install homebrew as a package manager

#+BEGIN_SRC sh
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
#+END_SRC

Hit enter and follow the instructions.  It will ask you for your password.  The password 
won't show but if you type it you will install homebrew

On ubuntu
#+BEGIN_SRC sh
git clone https://github.com/yyuu/pyenv.git ~/.pyenv
echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
#+END_SRC

1. ubuntu and mac use pyenv
   - ubuntu modify .bashrc not bash profile
   - go to wiki and look for common build problems

#+BEGIN_SRC sh
sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev
#+END_SRC
   - Mac...problems with zlib have occurred, try 
#+BEGIN_SRC sh
brew install readline; brew link readline; pyenv install 2.7.10
#+END_SRC

### Emily fill in what flags you need to compile python on Mac ###


At the terminal type:
#+BEGIN_SRC sh
pyenv install 2.7.10 --verbose 
pyenv global 2.7.10
#+END_SRC

For both python and mac use pip to install
 python graphing with matplotlib, mathematics library
numpy, scientific library: scipy, smart repl ipython,
web application framework: flask, data frame: pandas.

#+BEGIN_SRC sh
pip install --verbose numpy 
pip install --verbose scipy 
pip install --verbose ipython
pip install --verbose flask
pip install --verbose pandas
#+END_SRC

2. windows go to https://www.python.org/downloads/release/python-2710/
* Pro tips 


1. Make sure you have a solid text editor. I use Emacs
#+BEGIN_SRC sh
sudo apt-get install emacs24
#+END_SRC

On mac:
#+BEGIN_SRC sh 
brew install emacs --cocoa
#+END_SRC

For windows:  http://vgoulet.act.ulaval.ca/en/emacs/windows/

such as Sublime Text (Free)
2. Get using the command line - visit
   http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything
   to learn the basics if you need them.

4. OPTIONAL: If you have existing Python packages that you don’t want
   to mess with, and you would prefer to develop your app in a virtual
   environment, you can do the following:
   install pyenv virtualenv (Follow directions here)  https://github.com/yyuu/pyenv-virtualenv
* Install mysql
-For ubutnu
#+BEGIN_SRC sh
sudo apt-get install mysql-server
sudo service mysql restart
#+END_SRC

Create a root password and write it down somewhere safe
reference http://blog.joefallon.net/2013/10/install-mysql-on-mac-osx-using-homebrew/

For Mac 
#+BEGIN_SRC sh
brew install mysql
mysql_secure_installation
#+END_SRC

* PyMySql: a mysql connector to python
1. Install the python library to connect to mysql from the terminal
#+BEGIN_SRC sh
pip install pymysql 
#+END_SRC
2. check that you can login to the database with a password
#+BEGIN_SRC sh
mysql -u root -p
#+END_SRC
 - common errors "no socket" server is not running
 - password won't work on mac on fresh homebrew install
 - remember your root password!!
#+BEGIN_SRC sh
mysql_secure_installation
#+END_SRC
3. Once you are in your password will say "mysql>". At that prompt:
#+BEGIN_SRC sh
CREATE DATABASE testdb;
USE testdb;
\q
#+END_SRC

4. Do you have an editor? If so, use it
   - Mac 
#+BEGIN_SRC sh

#+END_SRC
 brew install emacs --cocoa
#+END_SRC
   - Ubuntu
#+BEGIN_SRC sh
sudo apt-get install emacs24
#+END_SRC
 
In any case create the file by finding it.  Press Control-X and then
Control-F. Emacs Control is abbreviated by C and Alt by M or Meta.

Add the following to the file:

#+BEGIN_SRC python 
import pymysql as mdb

con = mdb.connect('localhost', 'root', '', 'testdb') #host, user, password, #database

with con:
    cur = con.cursor()
    cur.execute("DROP TABLE IF EXISTS Writers")
    cur.execute("CREATE TABLE Writers(Id INT PRIMARY KEY AUTO_INCREMENT,Name VARCHAR(25))")
    cur.execute("INSERT INTO Writers(Name) VALUES('Jack London')")
    cur.execute("INSERT INTO Writers(Name) VALUES('Honore de Balzac')")
    cur.execute("INSERT INTO Writers(Name) VALUES('Lion Feuchtwanger')")
    cur.execute("INSERT INTO Writers(Name) VALUES('Emile Zola')")
    cur.execute("INSERT INTO Writers(Name) VALUES('Truman Capote')")

with con: 
    cur = con.cursor()
    cur.execute("SELECT * FROM Writers")
    rows = cur.fetchall()
    for row in rows:
        print row
#+END_SRC

* Flask 
** Create the directory structure
#+BEGIN_SRC sh
pip install flask
cd ~/Documents
mkdir dm
cd dm
mkdir app
mkdir app/static #for your javascript
mkdir app/templates # for the parts of your webpages that are always the same
mkdir tmp
#+END_SRC
** create a module file
1. You are creating your own module in python called app
2. You need to tell python that you will want to import these
   functions as a module(library).
3. You need to create an init file
4. In the ~app~ file (ignore the tildas) create ~__init__.py~
#+BEGIN_SRC python
from flask import Flask
app = Flask(__name__)
from app import views
#+END_SRC
5. The script above simply creates the application object (of class
   Flask) and then imports the views module, which we haven't written
   yet.
6. The views are the handlers that respond to requests from web
   browsers. In Flask views are written as Python functions. Each view
   function is mapped to one or more request URLs.
7. Let's write our first view function in a new file called
   app/views.py:
#+BEGIN_SRC python
from app import app

@app.route('/')
@app.route('/index')
def index():
    return "Hello, World!"
#+END_SRC
8. We have just written a small server.  Given either no extension or
   'index', we return "Hello, World!".
9. Now we need to create a script that starts the development server
10. In ~/Documents/dm~ create ~run.py~
#+BEGIN_SRC sh
#!/usr/bin/env python
from app import app
app.run(debug = True)
#+END_SRC
   + A few important features of this little script.
   + The script imports the app.
   + The script invokes the app's run method
   + The first line ensures that the python interpreter used is the
     first one in your path.
11. Now you need to make run.py executable.
#+BEGIN_SRC sh
chmod +x run.py
#+END_SRC
12. Now test the app.  This is hard.
     + Make sure you are in the right directory cd ~/Documents/dm
     + Make sure your ~__init__.py~ is in the app directory
13. Try executing run.py
#+BEGIN_SRC sh
./run.py
#+END_SRC

** Templates

14. Templates are for all the parts of webpage that are the same
    accross many pages.  They are a new level of abstraction if you
    have not done web dev before.  Doing 500 of the same page will
    make you appreciate them quickly though.  Let's make a template of
    our little index page that says "Hello, World!".  We will make it
    so it can say high to anyone. Call the file index.html.
#+BEGIN_SRC html
<html>
  <head>
     <title>{{title}} - microblog</title>
  </head>
  <body>
     <h1>Hello, {{user.nickname}}!</h1>
  </body>
</html>
#+END_SRC

15. To take advantage of the template we have to rewrite our views.py

#+BEGIN_SRC python
from flask import render_template
from app import app

@app.route('/')
@app.route('/index')
def index():
    user = { 'nickname': 'Miguel' } # fake user
    return render_template("index.html",
        title = 'Home',
        user = user)
#+END_SRC

Take a breath.  You have now created a view that dynamically creates a
webpage.  The variable user is a python dict.  You are passing it to
the function ~render_template~ which is now imported from flask. This function
takes 'Home' as a parameter and finds your template and looks for places to
substitute in values of user.

** Sql and web pages make web 2.0

We don't have to restrict ourselves to hand coding names in views.  We can use
sql to provide a list of names or anything else to substitute in web views.  What
is that anything else?  Your picttures from facebook or instagram, all the tweets
in a hashtag or all the tweets only you subscribe to, or all of only all your
emails.

Ok. Enough talking.  Lets make two more views that pull from and
display the results from our database.  In python that means creating
two more views. We don't need to create a new file, just add them to
the views.py file we already have.

#+BEGIN_SRC python
from flask import render_template
from app import app
import pymysql as mdb

db = mdb.connect(user="root", host="localhost", db="world_innodb", charset='utf8')

@app.route('/')
@app.route('/index')
def index():
	return render_template("index.html",
        title = 'Home', user = { 'nickname': 'Miguel' },
        )

@app.route('/db')
def cities_page():
	with db: 
		cur = db.cursor()
		cur.execute("SELECT Name FROM City LIMIT 15;")
		query_results = cur.fetchall()
	cities = ""
	for result in query_results:
		cities += result[0]
		cities += "<br>"
	return cities
#+END_SRC

Notice that we import the pymsql library.  This allows us to connect to the 
database in python.  This is used to connect to the database and create a 
database cursor which can execute sql and hold the results.  The 0th item in 
that list is appended with and html <br> tag.
15. Copy the above into views.py.  Be careful to make sure that the
    indentation matches, python uses indentation to impute meaning.
    Save the file and execute run.py from the command line. In the
    browser go to http://localhost:5000/ -- you’ll still see Miguel
    there.
16. Go to http://localhost:5000/db -- We just pulled data from the
    world database and displayed it on the website! But, it looks
    terrible at this point.
* Twitter bootstrap


1. Go to http://getbootstrap.com/ and download Bootstrap. Bootstrap is
   the most popular HTML, CSS, and JS framework for developing
   responsive, mobile first projects on the web.
2. When you extract the file, you’ll find the directories: css, fonts, and js.
3. Copy these directories into your app/static folder.
4. Let's write a new view in views.py that will use a template.  In
   the codeblock below is the new view:

#+BEGIN_SRC python
from flask import render_template
from app import app
import pymysql as mdb

db= mdb.connect(user="root", host="localhost", db="world_innodb", charset='utf8')

@app.route('/')
@app.route('/index')
def index():
	return render_template("index.html",
        title = 'Home',
        )

@app.route('/db')
def cities_page():
	with db: 
		cur = db.cursor()
		cur.execute("SELECT Name FROM City LIMIT 15;")
		query_results = cur.fetchall()
	cities = ""
	for result in query_results:
		cities += result[0]
		cities += "<br>"
	return cities

@app.route("/db_fancy")
def cities_page_fancy():
	with db:
		cur = db.cursor()
		cur.execute("SELECT Name, CountryCode, 
			Population FROM City ORDER BY Population LIMIT 15;")

		query_results = cur.fetchall()
	cities = []
	for result in query_results:
		cities.append(dict(name=result[0], country=result[1], population=result[2]))
	return render_template('cities.html', cities=cities)
#+END_SRC


5. Now let’s use twitter bootstrap to create an html template in the
   app/templates folder. Twitter Bootstrap will make the elemments
   visually pleasing. Use the Starter Template.
   + Check out this set of templates.
   + Click Starter Template.
   + View the page source and copy that into a new file called
     cities.html in your templates directory.
6. /Important:/ Edit cities.html so that the path to Bootstrap core
   CSS is correct.
     - <link href="../static/css/bootstrap.min.css" rel="stylesheet">
     -  Open it again -- This should look almost right!
4. Here is the full html for cities.html

#+BEGIN_SRC html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="../../favicon.ico">

    <title>Starter Template for Bootstrap</title>

    <!-- Bootstrap core CSS -->
    <link href="/static/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="starter-template.css" rel="stylesheet">

    <!-- Just for debugging purposes. Don't actually copy these 2 lines! -->
    <!--[if lt IE 9]><script src="../../assets/js/ie8-responsive-file-warning.js"></script><![endif]-->
    <script src="../../assets/js/ie-emulation-modes-warning.js"></script>

    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <script src="../../assets/js/ie10-viewport-bug-workaround.js"></script>

    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>

  <body>

    <div class="navbar navbar-inverse navbar-fixed-top" role="navigation">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Project name</a>
        </div>
        <div class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li class="active"><a href="#">Home</a></li>
            <li><a href="#about">About</a></li>
            <li><a href="#contact">Contact</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </div>

<br><br> 

    <div class="container">
      <div class="starter-template">
        <h1>Bootstrap starter template</h1>
        <p class="lead">Use this document as a way to quickly start any new project.<br> All you get is this text and a mostly barebones HTML document.</p>
      </div>
    <table class="table table-hover">
    <tr><th>Name</th><th>Country</th><th>Population</th></tr>
    {% for city in cities %}
    <tr><td>{{ city['name'] }}</td><td>{{ city['country']}}</td><td> {{ city['population'] }}</td></tr>
    {% endfor %}
    </table>
    <script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
    <script src="static/js/bootstrap.min.js"></script>

    </div><!-- /.container -->


    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="../../dist/js/bootstrap.min.js"></script>
  </body>
</html>
#+END_SRC

* Adding buttons that make stuff happen: 
The goal is to create a button to pull user input into your app /
model.

1. Let’s first edit views.py to add routes for input and output pages,
   and import “request” to allow us to grab data inputted by the user:

Here is yet another version of views.py:

#+BEGIN_SRC python
from flask import render_template, request
from app import app
import pymysql as mdb

db= mdb.connect(user="root", host="localhost", db="world_innodb", charset='utf8')

@app.route('/')
@app.route('/index')
def index():
	return render_template("index.html",
        title = 'Home',
        )

@app.route('/db')
def cities_page():
	with db: 
		cur = db.cursor()
		cur.execute("SELECT Name FROM City LIMIT 15;")
		query_results = cur.fetchall()
	cities = ""
	for result in query_results:
		cities += result[0]
		cities += "<br>"
	return cities

@app.route("/db_fancy")
def cities_page_fancy():
	with db:
		cur = db.cursor()
		cur.execute("SELECT Name, CountryCode, Population FROM City ORDER BY Population LIMIT 15;")

		query_results = cur.fetchall()
	cities = []
	for result in query_results:
		cities.append(dict(name=result[0], country=result[1], population=result[2]))
	return render_template('cities.html', cities=cities) 

@app.route('/input')
def cities_input():
  return render_template("input.html")

@app.route('/output')
def cities_output():
  return render_template("output.html")
#+END_SRC

We have added a route for input and a route for output. Now let's
create templates for those views.

1. Start by copying cities.html input.html and output.html

#+BEGIN_SRC sh
cp app/templates/cities.html app/templates/input.html
cp app/templates/cities.html app/templates/output.html
#+END_SRC

Here is the full input.html

#+BEGIN_SRC html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="../../favicon.ico">

    <title>Starter Template for Bootstrap</title>

    <!-- Bootstrap core CSS -->
    <link href="../static/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="starter-template.css" rel="stylesheet">

    <!-- Just for debugging purposes. Don't actually copy these 2 lines! -->
    <!--[if lt IE 9]><script src="../../assets/js/ie8-responsive-file-warning.js"></script><![endif]-->
    <script src="../../assets/js/ie-emulation-modes-warning.js"></script>

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>

  <body>

    <nav class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Project name</a>
        </div>
        <div id="navbar" class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li class="active"><a href="#">Home</a></li>
            <li><a href="#about">About</a></li>
            <li><a href="#contact">Contact</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>


<br><br>

  <div class="container">

    <div class="starter-template">
        <h2>Input Page</h2>
        <p>Enter some user input</p>
    </div>

    <div class = "container">

      <form  action="/output" method="GET">
        <div class="form-group">
          <label for="ID">City  Name:</label>
          <input type="text" id="ID" name='ID' placeholder="e.g. ">
        </div>

        <div>
          <button type="submit" class="btn btn-default btn-lg">Find this city!</button>
        </div>

      </form>
    </div>

    <script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
    <script src="static/js/bootstrap.min.js"></script>

  </div> <!-- /.container-->


    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
    <script src="../../dist/js/bootstrap.min.js"></script>
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <script src="../../assets/js/ie10-viewport-bug-workaround.js"></script>
  </body>
</html>
#+END_SRC

Again you hae to make sure that the path point to the correct place on your 
system.

Here is the full output.html:

#+BEGIN_SRC html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="../../favicon.ico">

    <title>Starter Template for Bootstrap</title>

    <!-- Bootstrap core CSS -->
    <link href="../static/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="starter-template.css" rel="stylesheet">

    <!-- Just for debugging purposes. Don't actually copy these 2 lines! -->
    <!--[if lt IE 9]><script src="../../assets/js/ie8-responsive-file-warning.js"></script><![endif]-->
    <script src="../../assets/js/ie-emulation-modes-warning.js"></script>

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>

  <body>

    <nav class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Project name</a>
        </div>
        <div id="navbar" class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li class="active"><a href="#">Home</a></li>
            <li><a href="#about">About</a></li>
            <li><a href="#contact">Contact</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>


<br><br>

  <div class="container">

    <div class="starter-template">
        <h2>Input Page</h2>
        <p>Enter some user input</p>
    </div>

    <div class = "container">

      <form  action="/output" method="GET">
        <div class="form-group">
          <label for="ID">City  Name:</label>
          <input type="text" id="ID" name='ID' placeholder="e.g. ">
        </div>

        <div>
          <button type="submit" class="btn btn-default btn-lg">Find this city!</button>
        </div>

      </form>
    </div>

    <script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
    <script src="static/js/bootstrap.min.js"></script>

  </div> <!-- /.container-->


    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
    <script src="../../dist/js/bootstrap.min.js"></script>
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <script src="../../assets/js/ie10-viewport-bug-workaround.js"></script>
  </body>
</html>
#+END_SRC
Now we have a button and two views. We just need to add some python
code that takes the input and adds the parameter to the database
request. Here is our modified version of the part of views.py that controls
the output html.

#+BEGIN_SRC python
@app.route('/output')
def cities_output():
  #pull 'ID' from input field and store it
  city = request.args.get('ID')

  with db:
    cur = db.cursor()
    #just select the city from the world_innodb that the user inputs
    cur.execute("SELECT Name, CountryCode,  Population FROM City WHERE Name='%s';" % city)
    query_results = cur.fetchall()

  cities = []
  for result in query_results:
    cities.append(dict(name=result[0], country=result[1], population=result[2]))
  the_result = ''
  return render_template("output.html", cities = cities, the_result = the_result)
#+END_SRC

Now we have a button that grabs data and displays it.


Now go to http://127.0.0.1:5000/input.  After pushing the button you
are taken to http://127.0.0.1:5000/output?ID=Boston. You will see the
returned Name, Country, and Population of the input city, and the next
section is a placeholder for now.

Let’s process the raw data from the database. We can pretend we are
doing some statistics and/or datamining.  In web development this is
called your model. In app/ create a file named a_Model.py with a
simple function called ModelIt

#+BEGIN_SRC python
def ModelIt(fromUser  = 'Default', population = 0):
  print 'The population is %i' % population
  result = population/1000000.0
  if fromUser != 'Default':
    return result
  else:
    return 'check your input'
#+END_SRC

Also, add a line to the top of views.py to include this function, and
call it inside of a function for the @app.route('/output'):

#+BEGIN_SRC python
from a_Model import ModelIt

@app.route('/output')
def cities_output():
  city = request.args.get('ID')

  with db:
    cur = db.cursor()
    #just select the city from the world_innodb that the user inputs
    cur.execute("SELECT Name, CountryCode,  Population FROM City WHERE Name='%s';" % city)
    query_results = cur.fetchall()

  cities = []
  for result in query_results:
    cities.append(dict(name=result[0], country=result[1], population=result[2]))

  #call a function from a_Model package. note we are only pulling one result in the query
  pop_input = cities[0]['population']
  the_result = ModelIt(city, pop_input)
  return render_template("output.html", cities = cities, the_result = the_result)
#+END_SRC

5. Restart the app and point your browser at: http://127.0.0.1:5000/input 
   Input "Chicago" and push the button you created.

The second to last line of the view takes the output of your sql query
and sends the result to your function, ModelIt. All it does is return
the population divided by 1000000 - not very exciting, but this is a
skeleton for you to play with.


7. You can learn to implement components from bootstrap buttons,
   menus, etc at: http://getbootstrap.com/components/


